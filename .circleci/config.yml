version: 2.1

#
#
#  RRRRRRRRRRRRRRRRR   EEEEEEEEEEEEEEEEEEEEEEMMMMMMMM               MMMMMMMM     OOOOOOOOO     VVVVVVVV           VVVVVVVVEEEEEEEEEEEEEEEEEEEEEE
#  R::::::::::::::::R  E::::::::::::::::::::EM:::::::M             M:::::::M   OO:::::::::OO   V::::::V           V::::::VE::::::::::::::::::::E
#  R::::::RRRRRR:::::R E::::::::::::::::::::EM::::::::M           M::::::::M OO:::::::::::::OO V::::::V           V::::::VE::::::::::::::::::::E
#  RR:::::R     R:::::REE::::::EEEEEEEEE::::EM:::::::::M         M:::::::::MO:::::::OOO:::::::OV::::::V           V::::::VEE::::::EEEEEEEEE::::E
#    R::::R     R:::::R  E:::::E       EEEEEEM::::::::::M       M::::::::::MO::::::O   O::::::O V:::::V           V:::::V   E:::::E       EEEEEE
#    R::::R     R:::::R  E:::::E             M:::::::::::M     M:::::::::::MO:::::O     O:::::O  V:::::V         V:::::V    E:::::E
#    R::::RRRRRR:::::R   E::::::EEEEEEEEEE   M:::::::M::::M   M::::M:::::::MO:::::O     O:::::O   V:::::V       V:::::V     E::::::EEEEEEEEEE
#    R:::::::::::::RR    E:::::::::::::::E   M::::::M M::::M M::::M M::::::MO:::::O     O:::::O    V:::::V     V:::::V      E:::::::::::::::E
#    R::::RRRRRR:::::R   E:::::::::::::::E   M::::::M  M::::M::::M  M::::::MO:::::O     O:::::O     V:::::V   V:::::V       E:::::::::::::::E
#    R::::R     R:::::R  E::::::EEEEEEEEEE   M::::::M   M:::::::M   M::::::MO:::::O     O:::::O      V:::::V V:::::V        E::::::EEEEEEEEEE
#    R::::R     R:::::R  E:::::E             M::::::M    M:::::M    M::::::MO:::::O     O:::::O       V:::::V:::::V         E:::::E
#    R::::R     R:::::R  E:::::E       EEEEEEM::::::M     MMMMM     M::::::MO::::::O   O::::::O        V:::::::::V          E:::::E       EEEEEE
#  RR:::::R     R:::::REE::::::EEEEEEEE:::::EM::::::M               M::::::MO:::::::OOO:::::::O         V:::::::V         EE::::::EEEEEEEE:::::E
#  R::::::R     R:::::RE::::::::::::::::::::EM::::::M               M::::::M OO:::::::::::::OO           V:::::V          E::::::::::::::::::::E
#  R::::::R     R:::::RE::::::::::::::::::::EM::::::M               M::::::M   OO:::::::::OO              V:::V           E::::::::::::::::::::E
#  RRRRRRRR     RRRRRRREEEEEEEEEEEEEEEEEEEEEEMMMMMMMM               MMMMMMMM     OOOOOOOOO                 VVV            EEEEEEEEEEEEEEEEEEEEEE
#
#
#
#
#
#
#
#
#
#  TTTTTTTTTTTTTTTTTTTTTTTHHHHHHHHH     HHHHHHHHHEEEEEEEEEEEEEEEEEEEEEE
#  T:::::::::::::::::::::TH:::::::H     H:::::::HE::::::::::::::::::::E
#  T:::::::::::::::::::::TH:::::::H     H:::::::HE::::::::::::::::::::E
#  T:::::TT:::::::TT:::::THH::::::H     H::::::HHEE::::::EEEEEEEEE::::E
#  TTTTTT  T:::::T  TTTTTT  H:::::H     H:::::H    E:::::E       EEEEEE
#          T:::::T          H:::::H     H:::::H    E:::::E
#          T:::::T          H::::::HHHHH::::::H    E::::::EEEEEEEEEE
#          T:::::T          H:::::::::::::::::H    E:::::::::::::::E
#          T:::::T          H:::::::::::::::::H    E:::::::::::::::E
#          T:::::T          H::::::HHHHH::::::H    E::::::EEEEEEEEEE
#          T:::::T          H:::::H     H:::::H    E:::::E
#          T:::::T          H:::::H     H:::::H    E:::::E       EEEEEE
#        TT:::::::TT      HH::::::H     H::::::HHEE::::::EEEEEEEE:::::E
#        T:::::::::T      H:::::::H     H:::::::HE::::::::::::::::::::E
#        T:::::::::T      H:::::::H     H:::::::HE::::::::::::::::::::E
#        TTTTTTTTTTT      HHHHHHHHH     HHHHHHHHHEEEEEEEEEEEEEEEEEEEEEE
#
#
#
#
#
#
#
#
#
#  HHHHHHHHH     HHHHHHHHH               AAA                  CCCCCCCCCCCCCKKKKKKKKK    KKKKKKK
#  H:::::::H     H:::::::H              A:::A              CCC::::::::::::CK:::::::K    K:::::K
#  H:::::::H     H:::::::H             A:::::A           CC:::::::::::::::CK:::::::K    K:::::K
#  HH::::::H     H::::::HH            A:::::::A         C:::::CCCCCCCC::::CK:::::::K   K::::::K
#    H:::::H     H:::::H             A:::::::::A       C:::::C       CCCCCCKK::::::K  K:::::KKK
#    H:::::H     H:::::H            A:::::A:::::A     C:::::C                K:::::K K:::::K
#    H::::::HHHHH::::::H           A:::::A A:::::A    C:::::C                K::::::K:::::K
#    H:::::::::::::::::H          A:::::A   A:::::A   C:::::C                K:::::::::::K
#    H:::::::::::::::::H         A:::::A     A:::::A  C:::::C                K:::::::::::K
#    H::::::HHHHH::::::H        A:::::AAAAAAAAA:::::A C:::::C                K::::::K:::::K
#    H:::::H     H:::::H       A:::::::::::::::::::::AC:::::C                K:::::K K:::::K
#    H:::::H     H:::::H      A:::::AAAAAAAAAAAAA:::::AC:::::C       CCCCCCKK::::::K  K:::::KKK
#  HH::::::H     H::::::HH   A:::::A             A:::::AC:::::CCCCCCCC::::CK:::::::K   K::::::K
#  H:::::::H     H:::::::H  A:::::A               A:::::ACC:::::::::::::::CK:::::::K    K:::::K
#  H:::::::H     H:::::::H A:::::A                 A:::::A CCC::::::::::::CK:::::::K    K:::::K
#  HHHHHHHHH     HHHHHHHHHAAAAAAA                   AAAAAAA   CCCCCCCCCCCCCKKKKKKKKK    KKKKKKK
#
#
#
#
#
#
#

# Reusable Snippets!
#
# These are re-used by the various tests below, to avoid repetition.
#
commands:
  install_desired_npm:
    description: "Install the same consistent version of npm"
    steps:
      - run:
          # Due to a bug, npm upgrades from the version of npm that ships with
          # Node.js 6 (npm v3.10.10) go poorly and generally causes other problems
          # with the environment.  Since yarn is already available here we can just
          # use that to work-around the issue.  It's possible that npm cleanup might
          # prevent this from being necessary, but this installation can be switched
          # to use `npm` (rather than `yarn`) once Node 6 is no longer tested below.
          name: Install npm@6, but with yarn.
          command: sudo yarn global add npm@6

  # These are the steps used for each version of Node which we're testing
  # against.  Thanks to YAMLs inability to merge arrays (though it is able
  # to merge objects), every version of Node must use the exact same steps,
  # or these steps would need to be repeated in a version of Node that needs
  # something different.  Probably best to avoid that, out of principle, though.
  common_test_steps:
    description: "Commands to run on every Node.js environment"
    steps:
      - install_desired_npm
      - checkout
      - restore_cache:
          keys:
            # When lock file changes, use increasingly general patterns to restore cache
            - npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
            - npm-v2-{{ .Branch }}-
            - npm-v2-
      - run: npm --version
      - run: npm ci
      - save_cache:
          key: npm-v2-{{ .Branch }}-{{ checksum "package-lock.json" }}
          paths:
            # This should cache the npm cache instead of node_modules, which is needed because
            # npm ci actually removes node_modules before installing to guarantee a clean slate.
            - ~/.npm
      # TODO TK HACK REMOVE ME, DISABLE TESTS COMPLETELY FOR ITERATION SPEED.
      # - run:
      #     command: npm run test:ci
      #     environment:
      #       JEST_JUNIT_OUTPUT: "reports/junit/js-test-results.xml"
      # - run: npm run coverage:upload
      # - store_test_results:
      #     path: reports/junit
      # - store_artifacts:
      #     path: reports/junit

executors:
  node:
    parameters:
      tag:
        type: string
        default: '10'
    docker:
      - image: circleci/node:<< parameters.tag >>


# Important! When adding a new job to `jobs`, make sure to define when it
# executes by also adding it to the `workflows` section below!
jobs:
  # Platform tests, each with the same tests but different platform or version.
  # The docker tag represents the Node.js version and the full list is available
  # at https://hub.docker.com/r/circleci/node/.

  # NODE: Note certain tests are currently being skipped for Node.js 6.
  NodeJS 6:
    executor: { name: node, tag: '6' }
    steps:
      - common_test_steps

  NodeJS 8:
    executor: { name: node, tag: '8' }
    steps:
      - common_test_steps

  NodeJS 10:
    executor: { name: node, tag: '10' }
    steps:
      - common_test_steps
      # We will save the results of this one particular invocation to use in
      # the publish step. Not only does this make the publishing step take less
      # time, this also ensures that a passing version gets deployed even if,
      # theoretically, rebuilding the same commit on the same version of
      # Node.js should yield the same results!
      - persist_to_workspace:
          root: .
          paths:
            - ./**

  NodeJS 12:
    executor: { name: node, tag: '12' }
    steps:
      - common_test_steps

  Dry Publish:
    executor: node
    steps:
      - attach_workspace:
          at: .
      - run: ls -laR

# XXX We used to use this filter to only run a "Docs" job on docs branches.
#     Now we use it to disable all jobs. It's unclear if there's a simpler way
#     to do this!
ignore_doc_branches: &ignore_doc_branches
  filters:
    branches:
      # If 'docs' is found, with word boundaries on either side, skip.
      ignore: /.*?\bdocs\b.*/

workflows:
  version: 2
  Build and Test:
    jobs:
      - NodeJS 6:
          <<: *ignore_doc_branches
      - NodeJS 8:
          <<: *ignore_doc_branches
      - NodeJS 10:
          <<: *ignore_doc_branches
      - NodeJS 12:
          <<: *ignore_doc_branches
      - Dry Publish:
          requires:
            - NodeJS 6
            - NodeJS 8
            - NodeJS 10
            - NodeJS 12
